generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique() @default(uuid()) @db.Uuid()
  name        String   @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  password    String   @db.VarChar(255)
  role        String   @db.VarChar(255)
  isEnabled   Boolean  @default(true) @map("is_enabled")
  firstAccess Boolean  @default(false) @map("first_access")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  tokens      Token[]
  coach       Coach?

  @@map("users")
}

model Token {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique() @default(uuid()) @db.Uuid()
  type      String   @db.VarChar(50)
  token     String   @db.VarChar(255)
  expiresIn DateTime @map("expires_in")
  isValid   Boolean  @default(true) @map("is_valid")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

model Coach {
  id            Int            @id @default(autoincrement())
  uuid          String         @unique() @default(uuid()) @db.Uuid()
  name          String         @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  userId        Int            @unique()
  user          User           @relation(fields: [userId], references: [id])
  isEnabled     Boolean        @default(true) @map("is_enabled")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  athletes      Athlete[]
  trainingTypes TrainingType[]

  @@map("coaches")
}

model Athlete {
  id                Int                   @id @default(autoincrement())
  uuid              String                @unique() @default(uuid()) @db.Uuid()
  name              String                @db.VarChar(255)
  email             String                @db.VarChar(255)
  birthday          DateTime
  weight            Float?
  height            Float?
  isEnabled         Boolean               @default(true) @map("is_enabled")
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")
  coachId           Int                   @map("coach_id")
  coach             Coach                 @relation(fields: [coachId], references: [id])
  trainingPlannings TrainingPlanning[]
  training          Training[]
  weeklyMonitorings WeeklyMonitoring[]
  wellBeingCaptures WellBeingMonitoring[]

  @@unique([email, coachId])
  @@map("athletes")
}

model TrainingType {
  id                Int                @id @default(autoincrement())
  uuid              String             @unique() @default(uuid()) @db.Uuid()
  name              String             @db.VarChar(255)
  isEnabled         Boolean            @default(true) @map("is_enabled")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  coachId           Int                @map("coach_id")
  coach             Coach              @relation(fields: [coachId], references: [id])
  trainingPlannings TrainingPlanning[]
  trainings         Training[]

  @@map("training_types")
}

model TrainingPlanning {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique() @default(uuid()) @db.Uuid()
  athleteId      Int
  athlete        Athlete      @relation(fields: [athleteId], references: [id])
  trainingTypeId Int
  trainingType   TrainingType @relation(fields: [trainingTypeId], references: [id])
  date           DateTime
  duration       Float
  pse            Float
  description    String?      @db.VarChar(255)
  finished       Boolean      @default(false)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("training_plannings")
}

model Training {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique() @default(uuid()) @db.Uuid()
  athleteId      Int
  athlete        Athlete      @relation(fields: [athleteId], references: [id])
  trainingTypeId Int
  trainingType   TrainingType @relation(fields: [trainingTypeId], references: [id])
  date           DateTime
  duration       Float
  pse            Float
  psr            Float
  load           Float
  description    String?      @db.VarChar(255)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("trainings")
}

model WeeklyMonitoring {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique() @default(uuid()) @db.Uuid()
  week            String   @unique
  startDate       DateTime
  endDate         DateTime
  weekLoad        Float
  averageWeekLoad Float
  monotony        Float
  chronic         Float
  acute           Float
  chronicAcute    Float
  strain          Float
  deviation       Float
  athleteId       Int
  athlete         Athlete  @relation(fields: [athleteId], references: [id])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("weeklys_monitoring")
}

model WellBeingMonitoring {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique() @default(uuid()) @db.Uuid()
  date        DateTime 
  athleteId   Int
  athlete     Athlete  @relation(fields: [athleteId], references: [id])
  sleep       Int
  disposition Int
  musclePain  Int
  stress      Int
  humor       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([athleteId, date])
  @@map("well_being_monitoring")
}

model Unsubscribes {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique() @default(uuid()) @db.Uuid()
  email       String   @unique() @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}
